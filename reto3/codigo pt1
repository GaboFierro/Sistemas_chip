//codigo 1


#include "MKL25Z4.h"
#include <stdint.h>

// ---- Pines usados ----

// Pines del teclado (4 filas: PTC0–PTC3, 4 columnas: PTC4–PTC7)
#define FILA_MASK  (0x0F)   // 00001111
#define COL_MASK   (0xF0)   // 11110000

// Pines de LEDs RGB (Rojo, Verde, Azul)
#define RED_LED    (1 << 18) // LED Rojo en PTB18
#define GREEN_LED  (1 << 19) // LED Verde en PTB19
#define BLUE_LED   (1 << 1)  // LED Azul en PTD1

// Pines del LCD conectados al puerto A
#define RS_MASK (1 << 2)     // Registro de datos/instrucción
#define EN_MASK (1 << 1)     // Habilitación del LCD
#define D4_MASK (1 << 4)     // Datos D4-D7 del LCD
#define D5_MASK (1 << 5)
#define D6_MASK (1 << 12)
#define D7_MASK (1 << 13)
#define LCD_MASK (RS_MASK | EN_MASK | D4_MASK | D5_MASK | D6_MASK | D7_MASK)

// ---- Matriz de teclas ----
// Esta matriz representa lo que devuelve cada combinación de fila-columna
const char teclas[4][4] = {
    {'1','2','3','A'},
    {'4','5','6','B'},
    {'7','8','9','C'},
    {'*','0','#','D'}
};

static volatile int8_t key_col = -1; // Guarda la columna detectada

// ---- Delay con SysTick ----
// Espera una cantidad de milisegundos usando el timer interno
void delayMs(uint32_t ms) {
    SysTick->LOAD  = (SystemCoreClock / 1000) - 1;
    SysTick->VAL   = 0;
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    for (uint32_t i = 0; i < ms; i++)
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
    SysTick->CTRL = 0;
}

// ---- Funciones del LCD ----

// Pulso de activación para que el LCD registre un dato
void lcd_pulse_enable(void) {
    PTA->PSOR = EN_MASK;
    delayMs(1);
    PTA->PCOR = EN_MASK;
    delayMs(1);
}

// Envía 4 bits (nibble) al LCD por los pines D4 a D7
void lcd_send_nibble(uint8_t nibble) {
    PTA->PCOR = D4_MASK | D5_MASK | D6_MASK | D7_MASK;

    if (nibble & 0x01) PTA->PSOR = D4_MASK;
    if (nibble & 0x02) PTA->PSOR = D5_MASK;
    if (nibble & 0x04) PTA->PSOR = D6_MASK;
    if (nibble & 0x08) PTA->PSOR = D7_MASK;

    lcd_pulse_enable(); // Manda el pulso para registrar el dato
}

// Envía una instrucción (comando) al LCD
void lcd_cmd(uint8_t cmd) {
    PTA->PCOR = RS_MASK; // RS en 0 = comando
    lcd_send_nibble(cmd >> 4);
    lcd_send_nibble(cmd & 0x0F);
    delayMs(2);
}

// Envía un carácter a mostrar en el LCD
void lcd_data(char data) {
    PTA->PSOR = RS_MASK; // RS en 1 = datos
    lcd_send_nibble(data >> 4);
    lcd_send_nibble(data & 0x0F);
    delayMs(2);
}

// Inicializa el LCD en modo de 4 bits
void lcd_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK; // Habilita reloj para puerto A

    // Configura los pines como GPIO
    PORTA->PCR[1]  = PORT_PCR_MUX(1);
    PORTA->PCR[2]  = PORT_PCR_MUX(1);
    PORTA->PCR[4]  = PORT_PCR_MUX(1);
    PORTA->PCR[5]  = PORT_PCR_MUX(1);
    PORTA->PCR[12] = PORT_PCR_MUX(1);
    PORTA->PCR[13] = PORT_PCR_MUX(1);
    PTA->PDDR |= LCD_MASK; // Establece los pines como salida

    // Secuencia de inicio para modo 4 bits
    delayMs(40);
    lcd_send_nibble(0x03); delayMs(5);
    lcd_send_nibble(0x03); delayMs(1);
    lcd_send_nibble(0x03); delayMs(1);
    lcd_send_nibble(0x02); delayMs(1); // Modo 4 bits

    lcd_cmd(0x28); // Modo 4 bits, 2 líneas
    lcd_cmd(0x0C); // Encender display, sin cursor
    lcd_cmd(0x06); // Modo entrada (cursor avanza)
    lcd_cmd(0x01); // Borrar pantalla
    delayMs(2);
}

// Posiciona el cursor del LCD en fila y columna deseadas
void lcd_set_cursor(uint8_t row, uint8_t col) {
    lcd_cmd((row == 0 ? 0x80 : 0xC0) + col);
}

// Imprime una cadena de texto en el LCD
void lcd_print(const char *str) {
    while (*str) lcd_data(*str++);
}

// ---- LEDs RGB ----

// Inicializa los pines de salida para los LEDs
void leds_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK | SIM_SCGC5_PORTD_MASK;

    PORTB->PCR[18] = PORT_PCR_MUX(1);
    PORTB->PCR[19] = PORT_PCR_MUX(1);
    PORTD->PCR[1]  = PORT_PCR_MUX(1);

    PTB->PDDR |= RED_LED | GREEN_LED; // Salida
    PTD->PDDR |= BLUE_LED;

    leds_off(); // Apaga los LEDs al inicio
}

// Apaga todos los LEDs
void leds_off(void) {
    PTB->PSOR = RED_LED | GREEN_LED;
    PTD->PSOR = BLUE_LED;
}

// ---- Teclado 4x4 ----

// Inicializa las filas como salida y columnas como entrada con resistencias pull-up
void keypad_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK;

    for (int i = 0; i < 4; i++)
        PORTC->PCR[i] = PORT_PCR_MUX(1); // Filas: salida

    for (int i = 4; i < 8; i++)
        PORTC->PCR[i] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; // Columnas: entrada + pull-up

    PTC->PDDR = (PTC->PDDR & ~COL_MASK) | FILA_MASK;
    PTC->PSOR = FILA_MASK; // Todas las filas en alto
}

// Detecta la tecla presionada y la devuelve
char get_key(void) {
    key_col = -1;

    for (uint32_t fila = 0; fila < 4; fila++) {
        PTC->PSOR = FILA_MASK;              // Todas en alto
        PTC->PCOR = (1U << fila);           // Solo una fila baja

        delayMs(2);                         // Espera un poco

        uint32_t cols = (PTC->PDIR & COL_MASK) >> 4U; // Lee columnas

        for (uint32_t c = 0; c < 4; c++) {
            if ((cols & (1U << c)) == 0U) { // Si encuentra una columna baja
                delayMs(20);                // Antirebote
                if (((PTC->PDIR >> (c + 4U)) & 1U) == 0U) {
                    while (((PTC->PDIR >> (c + 4U)) & 1U) == 0U); // Espera hasta que sueltes
                    key_col = c;
                    return teclas[fila][c];
                }
            }
        }
    }
    return '\0'; // Si no se presiona ninguna tecla
}

// ---- Programa principal ----

int main(void) {
    keypad_init();  // Inicializa el teclado
    leds_init();    // Inicializa los LEDs
    lcd_init();     // Inicializa el LCD

    // Mensaje en la pantalla al arrancar
    lcd_set_cursor(0, 0);
    lcd_print("Presiona una");
    lcd_set_cursor(1, 0);
    lcd_print("tecla del 1 al A");

    while (1) {
        char key = get_key(); // Espera a que presionen una tecla

        if (key != '\0') {
            leds_off(); // Apaga todos los LEDs

            // Según la columna, prende un color
            switch (key_col) {
                case 0: PTB->PCOR = RED_LED; break;          // Columna 0 → Rojo
                case 1: PTD->PCOR = BLUE_LED; break;         // Columna 1 → Azul
                case 2: PTB->PCOR = GREEN_LED; break;        // Columna 2 → Verde
                case 3:                                       // Columna 3 → Rojo + Azul
                    PTB->PCOR = RED_LED;
                    PTD->PCOR = BLUE_LED;
                    break;
            }
        }

        delayMs(50); // Pequeño delay entre lecturas
    }
}

