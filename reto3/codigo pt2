//Codigo 2

#include "MKL25Z4.h"       // Definiciones del microcontrolador KL25Z
#include <stdint.h>        // Tipos de datos estándar
#include <stdbool.h>       // Soporte para valores booleanos
#include <string.h>        // Funciones de cadena como strcpy, etc.

// Definición del pin del LED rojo
#define RED_LED (1 << 18)  // PTB18

// Pines usados por el LCD
#define RS_MASK (1 << 2)
#define EN_MASK (1 << 1)
#define D4_MASK (1 << 4)
#define D5_MASK (1 << 5)
#define D6_MASK (1 << 12)
#define D7_MASK (1 << 13)
#define LCD_MASK (RS_MASK | EN_MASK | D4_MASK | D5_MASK | D6_MASK | D7_MASK)

// Pines del teclado (PTC0–PTC3 filas, PTC4–PTC7 columnas)
#define FILA_MASK (0x0F)
#define COL_MASK  (0xF0)

// Matriz de teclas del teclado 4x4
const char teclas[4][4] = {
    {'1','2','3','A'},
    {'4','5','6','B'},
    {'7','8','9','C'},
    {'*','0','#','D'}
};

static volatile int8_t key_col = -1;  // Guarda la columna presionada

// Pausa el programa por cierta cantidad de milisegundos
void delayMs(uint32_t ms) {
    SysTick->LOAD = (SystemCoreClock / 1000U) - 1U;
    SysTick->VAL = 0U;
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    for (uint32_t i = 0; i < ms; i++) {
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0U);
    }
    SysTick->CTRL = 0U;
}

// Convierte un número entero a texto
void int_to_str(uint32_t num, char *buf) {
    sprintf(buf, "%u", num);
}

// Pulso para registrar comando o dato en el LCD
void lcd_pulse_enable(void) {
    PTA->PSOR = EN_MASK;
    delayMs(1);
    PTA->PCOR = EN_MASK;
    delayMs(1);
}

// Envío de 4 bits al LCD
void lcd_send_nibble(uint8_t nibble) {
    PTA->PCOR = D4_MASK | D5_MASK | D6_MASK | D7_MASK;

    if (nibble & 0x01) PTA->PSOR = D4_MASK;
    if (nibble & 0x02) PTA->PSOR = D5_MASK;
    if (nibble & 0x04) PTA->PSOR = D6_MASK;
    if (nibble & 0x08) PTA->PSOR = D7_MASK;

    lcd_pulse_enable();
}

// Envía una instrucción al LCD
void lcd_cmd(uint8_t cmd) {
    PTA->PCOR = RS_MASK;
    lcd_send_nibble(cmd >> 4);
    lcd_send_nibble(cmd & 0x0F);
    delayMs(2);
}

// Envía un carácter a mostrar en pantalla
void lcd_data(char data) {
    PTA->PSOR = RS_MASK;
    lcd_send_nibble(data >> 4);
    lcd_send_nibble(data & 0x0F);
    delayMs(2);
}

// Inicializa el LCD en modo de 4 bits
void lcd_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK;

    // Configura los pines del LCD como GPIO
    PORTA->PCR[1]  = PORT_PCR_MUX(1);
    PORTA->PCR[2]  = PORT_PCR_MUX(1);
    PORTA->PCR[4]  = PORT_PCR_MUX(1);
    PORTA->PCR[5]  = PORT_PCR_MUX(1);
    PORTA->PCR[12] = PORT_PCR_MUX(1);
    PORTA->PCR[13] = PORT_PCR_MUX(1);
    PTA->PDDR |= LCD_MASK;

    // Secuencia de inicio del LCD
    delayMs(40);
    lcd_send_nibble(0x03); delayMs(5);
    lcd_send_nibble(0x03); delayMs(1);
    lcd_send_nibble(0x03); delayMs(1);
    lcd_send_nibble(0x02); delayMs(1);

    lcd_cmd(0x28); // 4-bit, 2 líneas
    lcd_cmd(0x0C); // Display ON
    lcd_cmd(0x06); // Modo entrada
    lcd_cmd(0x01); // Limpiar pantalla
    delayMs(2);
}

// Posiciona el cursor en la fila y columna deseada
void lcd_set_cursor(uint8_t row, uint8_t col) {
    uint8_t pos = (row == 0) ? 0x80 + col : 0xC0 + col;
    lcd_cmd(pos);
}

// Imprime una cadena de texto en el LCD
void lcd_print(const char *str) {
    while (*str) lcd_data(*str++);
}

// Inicializa el teclado 4x4
void keypad_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK;

    // Filas como salida
    for (int i = 0; i < 4; i++)
        PORTC->PCR[i] = PORT_PCR_MUX(1);

    // Columnas como entrada con pull-up
    for (int i = 4; i < 8; i++)
        PORTC->PCR[i] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;

    PTC->PDDR = (PTC->PDDR & ~COL_MASK) | FILA_MASK;
    PTC->PSOR = FILA_MASK;
}

// Devuelve la tecla presionada
char get_key(void) {
    key_col = -1;
    for (uint32_t fila = 0; fila < 4; fila++) {
        PTC->PSOR = FILA_MASK;
        PTC->PCOR = (1U << fila);
        delayMs(2);
        uint32_t cols = (PTC->PDIR & COL_MASK) >> 4U;
        for (uint32_t c = 0; c < 4; c++) {
            if ((cols & (1U << c)) == 0U) {
                delayMs(20);
                if (((PTC->PDIR >> (c + 4U)) & 1U) == 0U) {
                    while (((PTC->PDIR >> (c + 4U)) & 1U) == 0U);
                    key_col = c;
                    return teclas[fila][c];
                }
            }
        }
    }
    return '\0'; // Ninguna tecla presionada
}

// Inicializa el pin del LED rojo
void led_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK;
    PORTB->PCR[18] = PORT_PCR_MUX(1);
    PTB->PDDR |= RED_LED;
    PTB->PSOR = RED_LED; // LED apagado (activo en bajo)
}

void led_on(void) {
    PTB->PCOR = RED_LED; // Encender
}

void led_off(void) {
    PTB->PSOR = RED_LED; // Apagar
}

// Espera bloqueante por la cantidad de segundos especificados
void timer_init(uint32_t seconds) {
    SIM->SCGC6 |= SIM_SCGC6_TPM0_MASK;
    SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1); // Fuente de reloj MCGFLLCLK

    TPM0->SC = 0;
    TPM0->MOD = seconds * 1000000 / 128; // Tiempo total = segundos
    TPM0->CNT = 0;
    TPM0->SC = TPM_SC_PS(7) | TPM_SC_CMOD(1); // Prescaler 128, modo contador

    while (!(TPM0->SC & TPM_SC_TOF_MASK)); // Espera overflow
    TPM0->SC &= ~TPM_SC_TOF_MASK;
    TPM0->SC = 0; // Detiene el temporizador
}

int main(void) {
    char input_buffer[5] = {0};  // Guarda los dígitos presionados
    uint8_t idx = 0;             // Índice para llenar el buffer
    char key;
    uint32_t tiempo = 0;         // Tiempo ingresado por el usuario
    char numstr[8];              // Texto para mostrar segundos

    keypad_init();
    lcd_init();
    led_init();

    lcd_set_cursor(0, 0);
    lcd_print("Kioña!");         // Mensaje de bienvenida
    delayMs(5000);               // Espera 5 segundos

    lcd_cmd(0x01);               // Limpiar pantalla
    lcd_print("Ingresa segundos:");
    lcd_set_cursor(1, 0);

    // Captura del tiempo ingresado
    while (1) {
        key = get_key();
        if (key >= '0' && key <= '9' && idx < 4) {
            input_buffer[idx++] = key;
            lcd_data(key);
        } else if (key == '*' || key == '#') {
            input_buffer[idx] = '\0'; // Fin del número
            break;
        }
    }

    // Convierte el string a número entero
    tiempo = atoi(input_buffer);

    // Inicia el conteo en pantalla
    lcd_cmd(0x01);
    lcd_print("Contando...");

    for (uint32_t i = 0; i <= tiempo; i++) {
        lcd_set_cursor(1, 0);
        int_to_str(i, numstr);
        lcd_print("Tiempo: ");
        lcd_print(numstr);
        lcd_print("     ");
        delayMs(1000); // 1 segundo por iteración
    }

    // Al final del conteo
    lcd_cmd(0x01);
    lcd_print("Tiempo cumplido!");
    led_on(); // Enciende el LED rojo

    while (1); // Loop infinito al terminar
}
