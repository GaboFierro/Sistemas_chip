#include "MKL25Z4.h"
#include <stdio.h>
#include <stdint.h>

#define RS (1 << 2)
#define EN (1 << 1)
#define D4 (1 << 4)
#define D5 (1 << 5)
#define D6 (1 << 12)
#define D7 (1 << 13)
#define LCD_MASK (RS | EN | D4 | D5 | D6 | D7)

void delayMs(uint32_t ms) {
    SysTick->LOAD = (SystemCoreClock/1000U) - 1U;
    SysTick->VAL = 0;
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    for (uint32_t i = 0; i < ms; i++) {
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
    }
    SysTick->CTRL = 0;
}

void lcd_pulse(void) {
    PTA->PSOR = EN;
    delayMs(1);
    PTA->PCOR = EN;
    delayMs(1);
}

void lcd_send_nibble(uint8_t nibble) {
    PTA->PCOR = D4 | D5 | D6 | D7;
    if (nibble & 0x01) PTA->PSOR = D4;
    if (nibble & 0x02) PTA->PSOR = D5;
    if (nibble & 0x04) PTA->PSOR = D6;
    if (nibble & 0x08) PTA->PSOR = D7;
    lcd_pulse();
}

void lcd_cmd(uint8_t cmd) {
    PTA->PCOR = RS;
    lcd_send_nibble(cmd >> 4);
    lcd_send_nibble(cmd & 0x0F);
    delayMs(2);
}

void lcd_data(char data) {
    PTA->PSOR = RS;
    lcd_send_nibble(data >> 4);
    lcd_send_nibble(data & 0x0F);
    delayMs(2);
}

void lcd_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK;

    PORTA->PCR[1] = PORT_PCR_MUX(1);
    PORTA->PCR[2] = PORT_PCR_MUX(1);
    PORTA->PCR[4] = PORT_PCR_MUX(1);
    PORTA->PCR[5] = PORT_PCR_MUX(1);
    PORTA->PCR[12] = PORT_PCR_MUX(1);
    PORTA->PCR[13] = PORT_PCR_MUX(1);

    PTA->PDDR |= LCD_MASK;
    PTA->PCOR = LCD_MASK;

    delayMs(40);
    lcd_send_nibble(0x03); delayMs(5);
    lcd_send_nibble(0x03); delayMs(1);
    lcd_send_nibble(0x03); delayMs(1);
    lcd_send_nibble(0x02); delayMs(1);

    lcd_cmd(0x28); // 4 bits, 2 líneas
    lcd_cmd(0x0C); // Display ON
    lcd_cmd(0x06); // Entry mode
    lcd_cmd(0x01); // Clear display
    delayMs(2);
}

void lcd_set_cursor(uint8_t row, uint8_t col) {
    lcd_cmd((row == 0 ? 0x80 : 0xC0) + col);
}

void lcd_print(const char *str) {
    while (*str) lcd_data(*str++);
}

// ---------- ADC functions ---------- //
void adc_init(void) {
    SIM->SCGC6 |= SIM_SCGC6_ADC0_MASK;
    ADC0->CFG1 = ADC_CFG1_MODE(3) | ADC_CFG1_ADICLK(0) | ADC_CFG1_ADIV(1); // 16 bits
    ADC0->SC2 = ADC_SC2_REFSEL(0);
}

void adc_calibrate(void) {
    ADC0->SC3 |= ADC_SC3_CAL_MASK;
    while (ADC0->SC3 & ADC_SC3_CAL_MASK);
    if (ADC0->SC3 & ADC_SC3_CALF_MASK) {
        ADC0->SC3 &= ~ADC_SC3_CALF_MASK;
    }
}

uint16_t adc_read_temp_sensor(void) {
    ADC0->SC1[0] = ADC_SC1_ADCH(26); // Canal 26 (sensor interno)
    while (!(ADC0->SC1[0] & ADC_SC1_COCO_MASK));
    return (uint16_t)(ADC0->R[0] & 0xFFFF);
}

// ⚡ Nueva fórmula para mover el punto una posición adelante
float calcular_temperatura(uint16_t adc_valor) {
    return adc_valor / 1000.0f;
}

int main(void) {
    char buffer[16];
    uint16_t adc_val;
    float temperatura;
    int entero, decimal;

    lcd_init();
    adc_init();
    adc_calibrate();

    while (1) {
        adc_val = adc_read_temp_sensor();
        temperatura = calcular_temperatura(adc_val);

        entero = (int)temperatura;
        decimal = (int)((temperatura - entero) * 100);

        lcd_cmd(0x01);
        lcd_set_cursor(0, 0);
        lcd_print("Temp Interna:");
        lcd_set_cursor(1, 0);
        sprintf(buffer, "%d.%02d C", entero, decimal);
        lcd_print(buffer);

        delayMs(1000);
    }
}
