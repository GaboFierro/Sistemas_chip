#include "MKL25Z4.h"

#define FREQ_PWM 50                     // Frecuencia 50Hz (20ms)
#define MOD_VALUE (48000000 / FREQ_PWM) // 960000 ciclos para 20ms
#define MIN_PULSE 48000                // 1 ms en ciclos (0°)
#define MAX_PULSE 96000                // 2 ms en ciclos (180°)

void init_PWM_servos(void) {
    // Habilitar reloj para puerto B y TPM1
    SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK;
    SIM->SCGC6 |= SIM_SCGC6_TPM1_MASK;

    // Configurar PTB0 (TPM1_CH0) y PTB1 (TPM1_CH1)
    PORTB->PCR[0] = PORT_PCR_MUX(3);
    PORTB->PCR[1] = PORT_PCR_MUX(3);

    // Seleccionar fuente de reloj para TPMs
    SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1); // MCGFLLCLK 48MHz

    // Configurar periodo de TPM1 (20ms)
    TPM1->MOD = MOD_VALUE - 1;

    // Configurar canales en modo PWM edge-aligned
    TPM1->CONTROLS[0].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
    TPM1->CONTROLS[1].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;

    // Ciclo inicial
    TPM1->CONTROLS[0].CnV = MIN_PULSE;
    TPM1->CONTROLS[1].CnV = MIN_PULSE;

    // Iniciar TPM1 sin prescaler
    TPM1->SC = TPM_SC_CMOD(1) | TPM_SC_PS(0);
}

void set_servo_both(int angle) {
    if (angle < 0) angle = 0;
    if (angle > 180) angle = 180;
    uint32_t pulse = MIN_PULSE + (angle * (MAX_PULSE - MIN_PULSE)) / 180;

    TPM1->CONTROLS[0].CnV = pulse; // PTB0
    TPM1->CONTROLS[1].CnV = pulse; // PTB1
}

void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms * 6000; i++) {
        __NOP();
    }
}

int main(void) {
    init_PWM_servos();

    while (1) {
        // Movimiento ascendente 0° a 180°
        for (int angle = 0; angle <= 180; angle += 5) {
            set_servo_both(angle);
            delay_ms(50); // Delay para movimiento suave
        }

        delay_ms(500); // Pausa en 180°

        // Movimiento descendente 180° a 0°
        for (int angle = 180; angle >= 0; angle -= 5) {
            set_servo_both(angle);
            delay_ms(50); // Delay para movimiento suave
        }

        delay_ms(500); // Pausa en 0°
    }
}
