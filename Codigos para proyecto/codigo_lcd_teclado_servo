#include "MKL25Z4.h"
#include <stdbool.h>
#include <string.h>
#include <stdio.h>

#define ROWS 4
#define COLS 4

char keys[ROWS][COLS] = {
    {'1','2','3','A'},
    {'4','5','6','B'},
    {'7','8','9','C'},
    {'*','0','#','D'}
};

char password[5] = "";
char input[5] = "";
bool password_set = false;
int input_index = 0;

// === SERVOMOTOR PTB1 ===
#define PWM_FREQUENCY 50
#define TPM1_MOD_VALUE (48000000 / PWM_FREQUENCY)

void init_PWM_PTB1(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTB_MASK;
    SIM->SCGC6 |= SIM_SCGC6_TPM1_MASK;
    PORTB->PCR[1] = PORT_PCR_MUX(3); // PTB1 como TPM1_CH1
    SIM->SOPT2 |= SIM_SOPT2_TPMSRC(1); // MCGFLLCLK

    TPM1->MOD = TPM1_MOD_VALUE - 1;
    TPM1->CONTROLS[1].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
    TPM1->CONTROLS[1].CnV = 48000;
    TPM1->SC = TPM_SC_CMOD(1) | TPM_SC_PS(0);
}

void set_servo_angle(int angle) {
    uint32_t pulse = 48000 + (angle * (96000 - 48000)) / 180;
    TPM1->CONTROLS[1].CnV = pulse;
}

// === DELAY ===
void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms * 6000; i++) __NOP();
}

// === LCD ===
void pulse_enable(void) {
    PTA->PCOR |= (1 << 1);
    delay_ms(1);
    PTA->PSOR |= (1 << 1);
    delay_ms(1);
    PTA->PCOR |= (1 << 1);
    delay_ms(1);
}

void lcd_send_nibble(uint8_t nibble) {
    PTA->PDOR &= ~((1 << 4) | (1 << 5) | (1 << 12) | (1 << 13));
    if(nibble & 0x01) PTA->PSOR |= (1 << 4);
    if(nibble & 0x02) PTA->PSOR |= (1 << 5);
    if(nibble & 0x04) PTA->PSOR |= (1 << 12);
    if(nibble & 0x08) PTA->PSOR |= (1 << 13);
    pulse_enable();
}

void lcd_cmd(uint8_t cmd) {
    PTA->PCOR |= (1 << 2); // RS = 0
    lcd_send_nibble(cmd >> 4);
    lcd_send_nibble(cmd & 0x0F);
    delay_ms(2);
}

void lcd_data(uint8_t data) {
    PTA->PSOR |= (1 << 2); // RS = 1
    lcd_send_nibble(data >> 4);
    lcd_send_nibble(data & 0x0F);
    delay_ms(2);
}

void lcd_print(char *str) {
    while (*str) lcd_data(*str++);
}

void init_LCD(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK;
    PTA->PDDR |= (1 << 1) | (1 << 2) | (1 << 4) | (1 << 5) | (1 << 12) | (1 << 13);
    PORTA->PCR[1] = PORT_PCR_MUX(1);
    PORTA->PCR[2] = PORT_PCR_MUX(1);
    PORTA->PCR[4] = PORT_PCR_MUX(1);
    PORTA->PCR[5] = PORT_PCR_MUX(1);
    PORTA->PCR[12] = PORT_PCR_MUX(1);
    PORTA->PCR[13] = PORT_PCR_MUX(1);

    delay_ms(40);
    lcd_cmd(0x33);
    lcd_cmd(0x32);
    lcd_cmd(0x28);
    lcd_cmd(0x0C);
    lcd_cmd(0x06);
    lcd_cmd(0x01);
    delay_ms(2);
}

// === TECLADO MATRICIAL ===
void init_keypad(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK;
    for (int i = 0; i < 4; i++) {
        PORTC->PCR[i] = PORT_PCR_MUX(1);
        PTC->PDDR |= (1 << i);
    }
    for (int i = 4; i < 8; i++) {
        PORTC->PCR[i] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK;
        PTC->PDDR &= ~(1 << i);
    }
}

char read_keypad(void) {
    for (int row = 0; row < 4; row++) {
        PTC->PSOR = 0x0F;
        PTC->PCOR = (1 << row);
        delay_ms(2);
        for (int col = 0; col < 4; col++) {
            if (!(PTC->PDIR & (1 << (col + 4)))) {
                delay_ms(200);
                return keys[row][col];
            }
        }
    }
    return 0;
}

// === MAIN ===
int main(void) {
    init_LCD();
    init_keypad();
    init_PWM_PTB1();

    lcd_print("Ingresa clave:");

    while (1) {
        char key = read_keypad();
        if (key) {
            if (key >= '0' && key <= '9' && input_index < 4) {
                input[input_index++] = key;
                char tmp[2] = {key, '\0'};  // ← CORREGIDO
                lcd_print(tmp);
            } else if (key == 'A') {
                input[4] = '\0';
                if (!password_set) {
                    strcpy(password, input);
                    lcd_cmd(0x01);
                    lcd_print("Clave guardada");
                    password_set = true;
                } else {
                    if (strcmp(password, input) == 0) {
                        lcd_cmd(0x01);
                        lcd_print("Correcta :)");

                        // Movimiento de 0° a 180°
                        for (int angle = 0; angle <= 180; angle += 10) {
                            set_servo_angle(angle);
                            delay_ms(300);
                        }

                        delay_ms(500);

                        // Regreso de 180° a 0°
                        for (int angle = 180; angle >= 0; angle -= 10) {
                            set_servo_angle(angle);
                            delay_ms(300);
                        }

                    } else {
                        lcd_cmd(0x01);
                        lcd_print("Incorrecta :(");
                    }
                }
                memset(input, 0, sizeof(input));
                input_index = 0;
                delay_ms(1500);
                lcd_cmd(0x01);
                lcd_print("Ingresa clave:");
            }
        }
    }
}
