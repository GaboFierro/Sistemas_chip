#include "MKL25Z4.h"
#include <stdio.h>
#include <string.h>

/* LCD - Pines en PTA */
#define RS (1 << 2)
#define EN (1 << 1)
#define D4 (1 << 4)
#define D5 (1 << 5)
#define D6 (1 << 12)
#define D7 (1 << 13)
#define LCD_MASK (RS | EN | D4 | D5 | D6 | D7)

/* Botón en PTC12 */
#define BUTTON_PORT PORTC
#define BUTTON_GPIO PTC
#define BUTTON_PIN  12
#define BUTTON_MASK (1 << BUTTON_PIN)

/* === Delay con SysTick === */
void delayMs(int n) {
    SysTick->LOAD = (48000 * n) - 1; // 48 MHz → 48000 ciclos/ms
    SysTick->VAL = 0;
    SysTick->CTRL = 5; // Habilita SysTick con reloj interno
    while ((SysTick->CTRL & 0x10000) == 0); // Espera a que se ponga en 1
    SysTick->CTRL = 0;
}

/* === Funciones LCD === */
void pulse_enable(void) {
    PTA->PCOR = EN;
    delayMs(1);
    PTA->PSOR = EN;
    delayMs(1);
    PTA->PCOR = EN;
    delayMs(1);
}

void send_nibble(uint8_t data) {
    PTA->PCOR = D4 | D5 | D6 | D7;
    if (data & 0x01) PTA->PSOR = D4;
    if (data & 0x02) PTA->PSOR = D5;
    if (data & 0x04) PTA->PSOR = D6;
    if (data & 0x08) PTA->PSOR = D7;
}

void lcd_command(uint8_t cmd) {
    PTA->PCOR = RS;
    send_nibble(cmd >> 4);
    pulse_enable();
    send_nibble(cmd & 0x0F);
    pulse_enable();
    delayMs(2);
}

void lcd_data(uint8_t data) {
    PTA->PSOR = RS;
    send_nibble(data >> 4);
    pulse_enable();
    send_nibble(data & 0x0F);
    pulse_enable();
    delayMs(2);
}

void lcd_init(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK;
    PORTA->PCR[1]  = PORT_PCR_MUX(1); // EN
    PORTA->PCR[2]  = PORT_PCR_MUX(1); // RS
    PORTA->PCR[4]  = PORT_PCR_MUX(1); // D4
    PORTA->PCR[5]  = PORT_PCR_MUX(1); // D5
    PORTA->PCR[12] = PORT_PCR_MUX(1); // D6
    PORTA->PCR[13] = PORT_PCR_MUX(1); // D7

    PTA->PDDR |= LCD_MASK;

    delayMs(40);
    send_nibble(0x03); pulse_enable(); delayMs(5);
    send_nibble(0x03); pulse_enable(); delayMs(1);
    send_nibble(0x03); pulse_enable();
    send_nibble(0x02); pulse_enable(); // 4-bit

    lcd_command(0x28); // 2 líneas, 5x8 font
    lcd_command(0x0C); // Display ON, cursor OFF
    lcd_command(0x06); // Entry mode
    lcd_command(0x01); // Clear
}

void lcd_clear(void) {
    lcd_command(0x01);
}

void lcd_print(char *str) {
    while (*str) lcd_data(*str++);
}

/* === Inicializar botón === */
void init_button(void) {
    SIM->SCGC5 |= SIM_SCGC5_PORTC_MASK;
    BUTTON_PORT->PCR[BUTTON_PIN] = PORT_PCR_MUX(1) | PORT_PCR_PE_MASK | PORT_PCR_PS_MASK; // Pull-up
    BUTTON_GPIO->PDDR &= ~BUTTON_MASK; // Entrada
}

/* === Programa principal === */
int main(void) {
    char buffer[16];
    uint32_t count = -1;
    uint8_t last_state = 1;
    uint8_t current_state;

    lcd_init();
    lcd_clear();
    init_button();

    // Mostrar conteo inicial
    sprintf(buffer, "Conteo: %lu", count);
    lcd_print(buffer);

    while (1) {
        current_state = (BUTTON_GPIO->PDIR & BUTTON_MASK) ? 1 : 0;

        if (last_state == 1 && current_state == 0) { // Flanco de bajada
            count++;
            sprintf(buffer, "Conteo: %lu", count);
            lcd_clear();
            lcd_print(buffer);
            delayMs(20); // Antirebote
        }

        last_state = current_state;
    }
}
